generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EmployeeStatus {
  ACTIVE
  PROBATION
  ONLEAVE
  EXEMPLOYEE
  PARTTIME
  INTERN
}

model Profile {
  id           String @id
  name         String
  username     String @unique
  email        String @unique
  profileImage String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Employee     Employee?
  Organization Organization?
}

enum Role {
  OWNER
  MANAGER
  HR
  REGULAR
}

model Employee {
  id          String         @id @default(uuid())
  employeeId  String         @unique @default(uuid())
  designation String
  status      EmployeeStatus @default(ACTIVE)
  office      String
  doj         DateTime
  // idCardImageUrl String
  role        Role           @default(REGULAR)

  profileId String  @unique
  profile   Profile @relation(references: [id], fields: [profileId], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(references: [id], fields: [organizationId], onDelete: Cascade)

  Project               Project[]
  TeamMember            TeamMember[]
  Channel               Channel[]
  Team                  Team[]
  Message               Message[]
  DirectMessage         DirectMessage[]
  ConversationInitiated Conversation[]  @relation("EmployeeOne")
  ConversationReceived  Conversation[]  @relation("EmployeeTwo")
  CreatedApplicant      Applicant[]     @relation("createdBy")
  HiredApplicant        Applicant[]     @relation("hiredBy")
  AppliedLeave          Leave[]         @relation("appliedBy")
  HandledLeave          Leave[]         @relation("handledBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
  @@index([employeeId])
  @@index([role])
}

model Organization {
  id   String @id @default(uuid())
  name String

  ownerId String  @unique
  owner   Profile @relation(references: [id], fields: [ownerId], onDelete: Cascade)

  Employees Employee[]
  Teams     Team[]
  Projects  Project[]
  Channel   Channel[]
  Applicant Applicant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Leave     Leave[]
}

enum TeamMemberType {
  MANAGER
  LEAD
  REGULAR
}

model Team {
  id   String @id @default(uuid())
  name String

  createdById String
  createdBy   Employee @relation(references: [id], fields: [createdById])

  organizationId String
  organization   Organization @relation(references: [id], fields: [organizationId], onDelete: Cascade)

  Projects   Project[]
  TeamMember TeamMember[]
  Channel    Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
  @@index([createdById])
}

model TeamMember {
  id         String         @id @default(uuid())
  memberType TeamMemberType @default(REGULAR)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@index([employeeId])
}

model Project {
  id   String @id @default(uuid())
  name String

  createdById String
  createdBy   Employee @relation(references: [id], fields: [createdById])

  organizationId String
  organization   Organization @relation(references: [id], fields: [organizationId], onDelete: Cascade)

  teamId String @unique
  team   Team   @relation(references: [id], fields: [teamId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChannelType {
  TEXT
  VIDEO
}

model Channel {
  id          String      @id @default(uuid())
  name        String
  channelType ChannelType @default(TEXT)

  createdById String
  createdBy   Employee @relation(fields: [createdById], references: [id])

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Message   Message[]

  @@index([teamId])
  @@index([organizationId])
}

model Message {
  id      String  @id @default(uuid())
  content String  @db.Text
  deleted Boolean @default(false)
  fileUrl String? @db.Text

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([employeeId])
}

model Conversation {
  id String @id @default(uuid())

  employeeOneId String
  employeeOne   Employee @relation("EmployeeOne", fields: [employeeOneId], references: [id], onDelete: Cascade)

  employeeTwoId String
  employeeTwo   Employee @relation("EmployeeTwo", fields: [employeeTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([employeeOneId, employeeTwoId])
  @@index([employeeOneId])
  @@index([employeeTwoId])
}

model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text
  deleted Boolean @default(false)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
  @@index([conversationId])
}

enum ApplicantStatus {
  RECEIVED
  SCHEDULED
  OFFEREXTENDED
  HIRED
  REJECTED
}

model Applicant {
  id          String          @id @default(uuid())
  name        String
  email       String
  designation String
  status      ApplicantStatus @default(RECEIVED)
  office      String
  resumeUrl   String          @db.Text

  createdById String
  createdBy   Employee @relation("createdBy", references: [id], fields: [createdById])

  hiredById String?
  hiredBy   Employee? @relation("hiredBy", references: [id], fields: [hiredById])

  organizationId String
  organization   Organization @relation(references: [id], fields: [organizationId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
  @@index([hiredById])
  @@index([createdById])
}

enum LeaveStatus {
  APPLIED
  ON_HOLD
  APPROVED
  REJECTED
}

model Leave {
  id         String      @id @default(uuid())
  reason     String      @db.Text
  from       DateTime
  to         DateTime
  rejoinedOn DateTime?
  status     LeaveStatus

  appliedById String
  appliedBy   Employee @relation("appliedBy", fields: [appliedById], references: [id])

  handledById String?
  handledBy   Employee? @relation("handledBy", fields: [handledById], references: [id])

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
  @@index([handledById])
  @@index([appliedById])
}
